/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a735bd28-0fe6-48a0-a071-4e9ca980a1f6

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float current;
  float voltage;
  int humidity;
  int temperature;
  bool button;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>

DHT dht(2, DHT11); // Pin fro the sensor
int temp; // variable for temperature
int hum;  // variable for humididty
int thd = 500; // amount of time is given for the sensor to collect data

int batteryCapacity = 2000;     //capacity rating of battery in mAh
float resistance = 100.0;     //measured resistance of the power resistor
int cutoffVoltage = 5000;     //maximum battery voltage (in mV) that should not be exceeded
long cutoffTime = 14400000;     //maximum charge time of 13 hours that should not be exceeded
float SPV = 5000; //The voltage of the solar panel (mV)
float DisplayVoltage = 0;

int outputPin = 10;     // Output signal wire connected to digital pin 9
int outputValue = 150;     //value of PWM output signal

int analogPinOne = 2;     //first voltage probe connected to analog pin 1
float valueProbeOne = 0;     //variable to store the value of analogPinOne
float voltageProbeOne = 0;     //calculated voltage at analogPinOne

int analogPinTwo = 3;     //second voltage probe connected to analog pin 2
float valueProbeTwo = 0;     //variable to store the value of analogPinTwo
float voltageProbeTwo = 0;     //calculated voltage at analogPinTwo

float voltageDifference = 0;     //difference in voltage between analogPinOne and analogPinTwo
float batteryVoltage = 0;     //calculated voltage of battery
float current2 = 0;     //calculated current through the load (in mA)
float targetCurrent = batteryCapacity / 10;     //target output current (in mA) set at C/10 or 1/10 of the battery capacity per hour
float currentError = 0;     //difference between target current and actual current (in mA)

// Servo
#include <Servo.h>
Servo myservo;
int servoposition = 90;

// LDR Sensors
int Right = A1;
int Left = A0;

// Servo motor
int SM = 9;


float Time = 0; // The time of the code in milli seconds
float UpdatedTime = 0;
float DisplayTime = 0;



void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  pinMode(outputPin, OUTPUT);     // sets the pin as output
  pinMode(analogPinOne, INPUT);   // sets A2 pin as input
  pinMode(analogPinTwo, INPUT);   // sets A3 pin as input
  pinMode(LED_BUILTIN, OUTPUT); // Led pin to show that battery is full

  pinMode(Left, INPUT); // Left sensor of the servo
  pinMode(Right, INPUT); // Right sensor of the servo
  myservo.attach(9); // Servo activation


  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  dht.begin();
}

void loop() {
  ArduinoCloud.update();
  // Your code here

  // Checks the LDR Sensors
  int east = analogRead(Right);
  int west = analogRead(Left);
  west = west * 5;

  // Turns it to the left by default

  if (east < 350 && west < 350) {


    myservo.write(servoposition);
    Serial.print("Returning to neutral Position.");
    Serial.println("");
    //delay(100);


  }

  // Turns left if there is more sunlight on the left side.
  int error = east - west;
  Serial.print("The right side has a value of: ");
  Serial.println(east);

  Serial.print("The left side has a vlue of: ");
  Serial.println(west);

  Serial.print("The total is: ");
  Serial.println(error);


  if (error > 100) {
    if (servoposition <= 180) {
      servoposition = servoposition + 10;
      myservo.write(servoposition);
      Serial.println("Turning to the left.");
      //delay(100);
    }
  }

  // Turns right if there is more sunlight on the right side.
  if (error < -100) {
    if (servoposition >= -90) {
      servoposition = servoposition - 10;
      myservo.write(servoposition);
      Serial.println("Turning to the Right.");
      //delay(100);
    }
  }

  analogWrite(outputPin, outputValue);  //Write output value to output pin
  digitalWrite(LED_BUILTIN, LOW);

  Serial.print("Output: ");     //display output values for monitoring with a computer
  Serial.println(outputValue);

  valueProbeOne = analogRead(analogPinOne);    // read the input value at probe one
  voltageProbeOne = (valueProbeOne * SPV) / 1023;   //calculate voltage at probe one in milliVolts
  Serial.print("Voltage Probe One (mV): ");     //display voltage at probe one
  Serial.println(voltageProbeOne);

  valueProbeTwo = analogRead(analogPinTwo);    // read the input value at probe two
  voltageProbeTwo = (valueProbeTwo * SPV) / 1023;   //calculate voltage at probe two in milliVolts
  Serial.print("Voltage Probe Two (mV): ");     //display voltage at probe two
  Serial.println(voltageProbeTwo);

  batteryVoltage = SPV - voltageProbeTwo;     //calculate battery voltage
  DisplayVoltage = batteryVoltage / 1000;
  Serial.print("Battery Voltage (V): ");     //display battery voltage
  Serial.println(DisplayVoltage);

  current2 = (voltageProbeTwo - voltageProbeOne) / resistance;     //calculate charge current
  Serial.print("Target Current (mA): ");     //display target current
  Serial.println(targetCurrent);
  Serial.print("Battery Current (mA): ");     //display actual current
  Serial.println(current);

  currentError = targetCurrent - current2;     //difference between target current and measured current
  Serial.print("Current Error  (mA): ");     //display current error
  Serial.println(currentError);

  Time = millis();
  DisplayTime = (Time - UpdatedTime) * 0.001;
  Serial.print("Time (Seconds): ");
  Serial.println(DisplayTime);


  Serial.println();     //extra spaces to make debugging data easier to read
  Serial.println();

  if (abs(currentError) > 10)    //if output error is large enough, adjust output
  {
    outputValue = outputValue * currentError / 10;

    if (outputValue < 1)   //output can never go below 0
    {
      outputValue = 0;
    }

    if (outputValue > 254)    //output can never go above 255
    {
      outputValue = 255;
    }

    analogWrite(outputPin, outputValue);     //write the new output value
  }

  if (batteryVoltage > cutoffVoltage)    //stop charging if the battery voltage exceeds the safety threshold
  {
    outputValue = 0;
    Serial.println("Max Voltage Exceeded");

  }


  if (Time > cutoffTime)    //stop charging if the charge time threshold
  {
    outputValue = 0;
    Serial.println("Max Charge Time Exceeded");

  }

  delay(thd);
  temp = dht.readTemperature();
  hum = dht.readHumidity();

  Serial.print("Temperature (C): ");
  Serial. println(temp);
  Serial.print("Humidity percentage: ");
  Serial.println(hum);

  if (outputValue == 0) {
    digitalWrite(LED_BUILTIN, HIGH);
  }
  else {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(100);
    digitalWrite(LED_BUILTIN, LOW);
  }
  Serial.print("The Position of the solar panel is: ");
  Serial.println(servoposition);

  voltage = DisplayVoltage;
  current = currentError;
  temperature = temp;
  humidity = hum;


}
/*
  Since Button is READ_WRITE variable, onButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onButtonChange()  {
  // Add your code here to act upon Button change
  if (button) {
    Serial.println("Button is pressed, the time is reset.");
    UpdatedTime = millis();
  }
}
